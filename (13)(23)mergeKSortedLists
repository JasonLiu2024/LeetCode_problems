/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        int k = lists.length;
        if(k == 0) return null;
        int batchSize = 1;
        while(batchSize < k){
            for(int i = 0; i < k - batchSize; i = i + batchSize * 2){
                lists[i] = merge2Lists(lists[i], lists[i + batchSize]);
            }
            batchSize *= 2;
        }
        return lists[0];
    }
    public ListNode merge2Lists(ListNode l1, ListNode l2){
        ListNode head = new ListNode();
        ListNode tail = head;
        while(l1 != null && l2 != null){
            if(l1.val < l2.val){
                tail.next = l1;
                l1 = l1.next;
            }else{
                tail.next = l2;
                l2 = l2.next;
            }
            tail = tail.next;
        }
        tail.next = l1 == null ? l2 : l1;
        return head.next;
    }
}
