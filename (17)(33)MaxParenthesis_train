class Solution {
    public int longestValidParentheses(String s) {
        int lenL = checkF(s);
        int lenR = checkB(s);
        return lenL > lenR ? 2 * lenL : 2 * lenR;
    }
    public int checkF(String s){
        int l = s.length();
        int left = 0; int right = 0;
        int len = 0;
        for(int i = 0; i < l; i++){
            char c = s.charAt(i);
            if(c == '('){left = left + 1;}
            else{right = right + 1;}
            if(left == right){
                int cur = left;
                if(cur >= len){len = cur;}
            }else if(left < right){
                left = 0; right = 0;
            }
        }
        return len;
    }
    public int checkB(String s){
        int l = s.length();
        int left = 0; int right = 0;
        int len = 0;
        for(int i = l - 1; i >= 0; i--){
            char c = s.charAt(i);
            if(c == '('){left = left + 1;}
            else{right = right + 1;}
            if(left == right){
                int cur = right;
                if(cur >= len){len = cur;}
            }else if(left > right){
                left = 0; right = 0;
            }
        }
        return len;
    }
}
